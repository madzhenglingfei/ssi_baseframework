<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns="http://www.springframework.org/schema/beans" xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd"
	 default-lazy-init="true">

	<description>
		Spring Database
		Spring与Mybatis相关的配置文件
		typeAliasesPackage:可以配置多个,用','号分隔
		basePackage:可以配置多个,用','号分隔
	</description>

	<!-- 
	<bean id="dataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="dataSource_main" />
	</bean>
	 -->
	 
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="validationQuery" value="SELECT 1" />
		<!-- 初始化大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<!-- 获取连接时测试是否有效 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时是否测试有效 -->
		<property name="testOnReturn" value="false" />
		<!-- 连接空闲时测试是否有效 -->
		<property name="testWhileIdle" value="true" />
		<!-- 逐出连接的检测时间间隔(主要用于检测空闲的连接) -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒,最小逐出时间 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开关闭“赃”连接（调用过getVendorConnection方法）功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 连接泄漏的超时时间 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭泄漏的连接时打印堆栈信息 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- SqlSessionFactoryBean再指明mapper xml文件的目录，这样就不用将mapper文件放到与entity一样深的目录了-->
		<property name="mapperLocations">
			<list>
				<value>classpath*:mybatis/mapper/*_Mapper.xml</value>
			</list>
		</property>
		<!-- 分页拦截器 -->
	    <property name="configLocation" value="classpath:spring/mybatis-config.xml" />  
		
		<!-- SqlSessionFactoryBean先指明type Aliases的扫描目录，将所有entity目录配进去，就省掉了用Config.xml的aliase配置 -->
		<property name="typeAliasesPackage" value="com.tydic.kkt.model.vo,com.tydic.kkt.model.dto,com.tydic.kkt.common.query" />
	</bean>

	<!--MapperScannerConfigurer指明需要扫描的DAO接口的目录，动态创建其实现类。
		如果DAO接口在多个目录中....请自己查资料（详情见springside4 mybatis说明————未验证）
		DAO接口，方法名必须与Mapper.xml中sql的名称一样
		Mapper.xml文件，nameSpace属性，必须是DAO接口的完整Class名
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.netease.ad.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
</beans>